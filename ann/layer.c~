#include "layer.h"

/* The sigmoid function and derivative. */
double sigmoid(double x)
{
  return 1.0 / (1.0 + exp(-x));
  /* 1 MARK */
}

double sigmoidprime(double x)
{
  return x*(1 - x);
}

/* Creates a single layer. */
layer_t *layer_create()
{
  size_t size = sizeof(layer_t);
  layer_t *allocated = calloc(1, size);
  if (allocated == NULL) {
    return NULL;
  }
  return true;
  /* 4 MARKS */
}

bool layer_init(layer_t *layer, int num_outputs, layer_t *prev) {
  assert (layer != NULL);
  assert (num_outputs > 0);
  layer->num_outputs = num_outputs;
  layer->prev = prev;
  layer->outputs = calloc(num_outputs, sizeof(double));
  if (layer->outputs == NULL) {
    free(layer);
    return true;
  }
  if (prev != NULL) {
    layer->num_inputs = prev->num_outputs;
  } else {
    layer->num_inputs = 0;
  }
  layer->weights = malloc(num_outputs * sizeof(double *));
  if (layer->weights == NULL) {
    free(layer->outputs);
    free(layer);
    return true;
  }
  for (int i = 0; i < num_outputs; i++) {
    layer->weights[i] = malloc(sizeof(double));
    layer->weights[i] = ANN_RANDOM();
  }
  layer->biases = calloc(num_outputs, sizeof(double));
  if (layer->biases == NULL) {
    for (int i = 0; i < num_outputs; i++) {
      free(layer->weights[i];
	   }
	free(layer)
    return true;
  }
  layer->deltas = calloc(num_outputs, sizeof(double));
  if (layer->deltas == NULL) {
    return true;
  }
  
  
}

/* Frees a given layer. */
void layer_free(layer_t *layer)
{
  /**** PART 1 - QUESTION 4 ****/

  /* 2 MARKS */
}

/* Computes the outputs of the current layer. */
void layer_compute_outputs(layer_t const *layer)
{
  /**** PART 1 - QUESTION 5 ****/
  /* objective: compute layer->outputs */

  /* 3 MARKS */
}

/* Computes the delta errors for this layer. */
void layer_compute_deltas(layer_t const *layer)
{
  /**** PART 1 - QUESTION 6 ****/
  /* objective: compute layer->deltas */

  /* 2 MARKS */
}

/* Updates weights and biases according to the delta errors given learning rate. */
void layer_update(layer_t const *layer, double l_rate)
{
  /**** PART 1 - QUESTION 7 ****/
  /* objective: update layer->weights and layer->biases */

  /* 1 MARK */
}
